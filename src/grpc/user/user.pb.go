// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{0}
}
func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (dst *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(dst, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type TokenReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenReply) Reset()         { *m = TokenReply{} }
func (m *TokenReply) String() string { return proto.CompactTextString(m) }
func (*TokenReply) ProtoMessage()    {}
func (*TokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{1}
}
func (m *TokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenReply.Unmarshal(m, b)
}
func (m *TokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenReply.Marshal(b, m, deterministic)
}
func (dst *TokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenReply.Merge(dst, src)
}
func (m *TokenReply) XXX_Size() int {
	return xxx_messageInfo_TokenReply.Size(m)
}
func (m *TokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_TokenReply proto.InternalMessageInfo

func (m *TokenReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing the user's name.
type HelloRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{2}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (dst *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(dst, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{3}
}
func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (dst *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(dst, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UserTokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTokenRequest) Reset()         { *m = UserTokenRequest{} }
func (m *UserTokenRequest) String() string { return proto.CompactTextString(m) }
func (*UserTokenRequest) ProtoMessage()    {}
func (*UserTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{4}
}
func (m *UserTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserTokenRequest.Unmarshal(m, b)
}
func (m *UserTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserTokenRequest.Marshal(b, m, deterministic)
}
func (dst *UserTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTokenRequest.Merge(dst, src)
}
func (m *UserTokenRequest) XXX_Size() int {
	return xxx_messageInfo_UserTokenRequest.Size(m)
}
func (m *UserTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserTokenRequest proto.InternalMessageInfo

func (m *UserTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserTokenRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserTokenRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UserTokenReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserTokenReply) Reset()         { *m = UserTokenReply{} }
func (m *UserTokenReply) String() string { return proto.CompactTextString(m) }
func (*UserTokenReply) ProtoMessage()    {}
func (*UserTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{5}
}
func (m *UserTokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserTokenReply.Unmarshal(m, b)
}
func (m *UserTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserTokenReply.Marshal(b, m, deterministic)
}
func (dst *UserTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTokenReply.Merge(dst, src)
}
func (m *UserTokenReply) XXX_Size() int {
	return xxx_messageInfo_UserTokenReply.Size(m)
}
func (m *UserTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserTokenReply proto.InternalMessageInfo

func (m *UserTokenReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ProjectRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Projectname          string   `protobuf:"bytes,2,opt,name=projectname,proto3" json:"projectname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectRequest) Reset()         { *m = ProjectRequest{} }
func (m *ProjectRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectRequest) ProtoMessage()    {}
func (*ProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{6}
}
func (m *ProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectRequest.Unmarshal(m, b)
}
func (m *ProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectRequest.Marshal(b, m, deterministic)
}
func (dst *ProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectRequest.Merge(dst, src)
}
func (m *ProjectRequest) XXX_Size() int {
	return xxx_messageInfo_ProjectRequest.Size(m)
}
func (m *ProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectRequest proto.InternalMessageInfo

func (m *ProjectRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ProjectRequest) GetProjectname() string {
	if m != nil {
		return m.Projectname
	}
	return ""
}

type ProjectReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectReply) Reset()         { *m = ProjectReply{} }
func (m *ProjectReply) String() string { return proto.CompactTextString(m) }
func (*ProjectReply) ProtoMessage()    {}
func (*ProjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_b7c0f31ee12ef013, []int{7}
}
func (m *ProjectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectReply.Unmarshal(m, b)
}
func (m *ProjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectReply.Marshal(b, m, deterministic)
}
func (dst *ProjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectReply.Merge(dst, src)
}
func (m *ProjectReply) XXX_Size() int {
	return xxx_messageInfo_ProjectReply.Size(m)
}
func (m *ProjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectReply proto.InternalMessageInfo

func (m *ProjectReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "helloworld.TokenRequest")
	proto.RegisterType((*TokenReply)(nil), "helloworld.TokenReply")
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*UserTokenRequest)(nil), "helloworld.UserTokenRequest")
	proto.RegisterType((*UserTokenReply)(nil), "helloworld.UserTokenReply")
	proto.RegisterType((*ProjectRequest)(nil), "helloworld.ProjectRequest")
	proto.RegisterType((*ProjectReply)(nil), "helloworld.ProjectReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error)
	TokenVerify2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	PostUserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error)
	GetUserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error)
	GetAllTokens(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error)
	GetProjectEmail(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
	GetProjectChargingByName(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
	GetRole(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
	GetUser(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error)
	GetProjects(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error) {
	out := new(TokenReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) TokenVerify2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/TokenVerify2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) PostUserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error) {
	out := new(UserTokenReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/PostUserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetUserToken(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error) {
	out := new(UserTokenReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetUserToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetAllTokens(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*UserTokenReply, error) {
	out := new(UserTokenReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetAllTokens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProjectEmail(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetProjectEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProjectChargingByName(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetProjectChargingByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetRole(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetUser(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error) {
	out := new(TokenReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProjects(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	GetToken(context.Context, *TokenRequest) (*TokenReply, error)
	TokenVerify2(context.Context, *HelloRequest) (*HelloReply, error)
	PostUserToken(context.Context, *UserTokenRequest) (*UserTokenReply, error)
	GetUserToken(context.Context, *UserTokenRequest) (*UserTokenReply, error)
	GetAllTokens(context.Context, *UserTokenRequest) (*UserTokenReply, error)
	GetProjectEmail(context.Context, *ProjectRequest) (*ProjectReply, error)
	GetProjectChargingByName(context.Context, *ProjectRequest) (*ProjectReply, error)
	GetRole(context.Context, *ProjectRequest) (*ProjectReply, error)
	GetUser(context.Context, *TokenRequest) (*TokenReply, error)
	GetProjects(context.Context, *HelloRequest) (*HelloReply, error)
	GetProject(context.Context, *ProjectRequest) (*ProjectReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_TokenVerify2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).TokenVerify2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/TokenVerify2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).TokenVerify2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_PostUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).PostUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/PostUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).PostUserToken(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetUserToken(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetAllTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetAllTokens(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProjectEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProjectEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetProjectEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProjectEmail(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProjectChargingByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProjectChargingByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetProjectChargingByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProjectChargingByName(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetRole(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetUser(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProjects(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Greeter_GetToken_Handler,
		},
		{
			MethodName: "TokenVerify2",
			Handler:    _Greeter_TokenVerify2_Handler,
		},
		{
			MethodName: "PostUserToken",
			Handler:    _Greeter_PostUserToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Greeter_GetUserToken_Handler,
		},
		{
			MethodName: "GetAllTokens",
			Handler:    _Greeter_GetAllTokens_Handler,
		},
		{
			MethodName: "GetProjectEmail",
			Handler:    _Greeter_GetProjectEmail_Handler,
		},
		{
			MethodName: "GetProjectChargingByName",
			Handler:    _Greeter_GetProjectChargingByName_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Greeter_GetRole_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Greeter_GetUser_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _Greeter_GetProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Greeter_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_b7c0f31ee12ef013) }

var fileDescriptor_user_b7c0f31ee12ef013 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x5b, 0x7e, 0xb4, 0xe5, 0x1a, 0x5a, 0x64, 0x21, 0x14, 0x05, 0x1e, 0x2a, 0x0b, 0xa1,
	0x8a, 0x87, 0x08, 0x95, 0x67, 0x90, 0x1a, 0x40, 0x29, 0x20, 0xa1, 0x28, 0x02, 0xb6, 0xd7, 0xac,
	0xbb, 0xa5, 0xd9, 0x9c, 0x3a, 0xb3, 0x5d, 0x6d, 0xf9, 0x5f, 0xf6, 0xc7, 0x4e, 0x71, 0xd2, 0xfc,
	0x98, 0xba, 0x3c, 0x64, 0x7b, 0xb3, 0xef, 0xbe, 0xfe, 0xf8, 0x7b, 0xbe, 0x93, 0x01, 0x76, 0x12,
	0x85, 0x9d, 0x08, 0xae, 0x38, 0x81, 0x0d, 0x32, 0xc6, 0xaf, 0xb8, 0x60, 0xa7, 0x94, 0x82, 0xf1,
	0x97, 0x5f, 0xe0, 0xd6, 0xc7, 0xcb, 0x1d, 0x4a, 0x45, 0x08, 0x3c, 0xdb, 0x06, 0x31, 0x9a, 0xfd,
	0x59, 0x7f, 0xfe, 0xc2, 0xd7, 0x6b, 0xfa, 0x01, 0xa0, 0xd0, 0x24, 0x2c, 0x25, 0x26, 0x0c, 0x63,
	0x94, 0x32, 0x08, 0xf7, 0xa2, 0xfd, 0x96, 0xbe, 0x07, 0x63, 0x95, 0x91, 0xf7, 0xac, 0xd7, 0xf0,
	0x5c, 0x65, 0xe7, 0x0a, 0x5d, 0xbe, 0xc9, 0x68, 0x85, 0xaa, 0x9d, 0x76, 0x0c, 0xaf, 0xfe, 0x49,
	0x14, 0x0d, 0x77, 0x07, 0x89, 0xa5, 0xe7, 0x27, 0x95, 0x67, 0x62, 0xc1, 0x28, 0xab, 0x58, 0xc7,
	0x9f, 0xea, 0x78, 0xb9, 0xa7, 0x1f, 0x61, 0x52, 0x23, 0xb7, 0xbb, 0x58, 0xc1, 0xc4, 0x13, 0xfc,
	0x1c, 0xd7, 0xaa, 0xdd, 0xc3, 0x0c, 0xc6, 0x49, 0xae, 0xab, 0x59, 0xa9, 0x87, 0xe8, 0x1c, 0x8c,
	0x92, 0xd4, 0x7a, 0xe7, 0xe2, 0x66, 0x00, 0x43, 0x57, 0x20, 0x2a, 0x14, 0xe4, 0x2b, 0x8c, 0x5c,
	0x54, 0xda, 0x2a, 0x31, 0xed, 0xaa, 0x71, 0x76, 0xfd, 0x5d, 0xac, 0x37, 0x07, 0x32, 0x09, 0x4b,
	0x69, 0x8f, 0x38, 0x45, 0x7f, 0xff, 0xa3, 0x88, 0xce, 0xd2, 0x45, 0x93, 0x51, 0xef, 0x56, 0x93,
	0x51, 0x75, 0x88, 0xf6, 0xc8, 0x6f, 0x78, 0xe9, 0x71, 0xa9, 0xca, 0x37, 0x23, 0xef, 0xea, 0xd2,
	0xbb, 0x4d, 0xb2, 0xac, 0x7b, 0xb2, 0x39, 0xec, 0x17, 0x18, 0x2e, 0x3e, 0x2a, 0x6b, 0xc9, 0x98,
	0x8e, 0xca, 0x07, 0xb1, 0x7e, 0xc2, 0xd4, 0x45, 0x55, 0x74, 0xe8, 0x47, 0x1c, 0x44, 0x8c, 0x34,
	0x0e, 0x34, 0xa7, 0xc0, 0x32, 0x0f, 0xe6, 0x72, 0x94, 0x0f, 0x66, 0x85, 0xfa, 0xb6, 0x09, 0x44,
	0x18, 0x6d, 0x43, 0x27, 0xfd, 0xa3, 0xe7, 0xb2, 0x23, 0x73, 0x09, 0x43, 0x17, 0x95, 0xcf, 0x59,
	0x77, 0xc4, 0x17, 0x8d, 0xc8, 0x0a, 0xef, 0x34, 0x49, 0x4b, 0x18, 0x57, 0x55, 0xc9, 0x4e, 0x83,
	0xf4, 0x1d, 0xa0, 0x42, 0x74, 0xad, 0xc3, 0xf9, 0x04, 0x6f, 0x23, 0x6e, 0x87, 0x22, 0x59, 0xdb,
	0x78, 0x1d, 0xc4, 0x09, 0x43, 0x59, 0x53, 0x3b, 0x53, 0x7d, 0xe5, 0x51, 0xb6, 0xf6, 0xb2, 0xef,
	0xce, 0xeb, 0x9f, 0x0c, 0xf4, 0xbf, 0xf7, 0xf9, 0x36, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xe1, 0x91,
	0x4f, 0x05, 0x05, 0x00, 0x00,
}
